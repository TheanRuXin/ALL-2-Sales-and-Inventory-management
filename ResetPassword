import sqlite3, hashlib
import customtkinter as ctk
from tkinter import messagebox
from PIL import Image

class ResetPasswordPage(ctk.CTkToplevel):
    def __init__(self, parent, username):
        super().__init__(parent)
        self.username = username
        self.title("Reset Password")
        self.geometry("700x400")
        self.resizable(False, False)
        self.configure(fg_color="white")
        self.attributes("-topmost", True)

        self.width, self.height = 700, 400
        self.set_ui()

        background_image = ctk.CTkImage(Image.open(r"C:\Users\User\Documents\Ruxin file\ALL 2\manager_dash.png"),
                                         size=(self.width, self.height - 71))
        background_image_label = ctk.CTkLabel(self, image=background_image, text="")
        background_image_label.place(relx=0, rely=0)

    def set_ui(self):
        title_label = ctk.CTkLabel(self, text="Reset Your Password", font=("Inter", 28), text_color="black", bg_color="white")
        title_label.place(x=200, y=50)

        self.new_password_var = ctk.StringVar()
        newpass_entry = ctk.CTkEntry(self, textvariable=self.new_password_var, placeholder_text="New Password",
                                      font=("Inter", 18), width=400, show="*")
        newpass_entry.place(x=150, y=130)

        self.confirm_password_var = ctk.StringVar()
        confirm_entry = ctk.CTkEntry(self, textvariable=self.confirm_password_var, placeholder_text="Confirm Password",
                                      font=("Inter", 18), width=400, show="*")
        confirm_entry.place(x=150, y=190)

        reset_button = ctk.CTkButton(self, text="Reset Password", font=("Inter", 16), width=150,
                                      fg_color="blue", command=self.reset_password)
        reset_button.place(x=275, y=260)

        cancel_button = ctk.CTkButton(self, text="Cancel", font=("Inter", 14), width=120,
                                       fg_color="red", command=self.destroy)
        cancel_button.place(x=300, y=320)

    def reset_password(self):
        new_password = self.new_password_var.get()
        confirm_password = self.confirm_password_var.get()

        if not new_password or not confirm_password:
            messagebox.showerror("Error", "Both fields are required.")
            return

        if new_password != confirm_password:
            messagebox.showerror("Error", "Passwords do not match!")
            return

        hashed_password = hashlib.sha256(new_password.encode()).hexdigest()

        try:
            conn = sqlite3.connect("Trackwise.db")
            cursor = conn.cursor()
            cursor.execute("UPDATE users SET password = ? WHERE username = ?", (hashed_password, self.username))
            conn.commit()
            conn.close()

            messagebox.showinfo("Success", "Password reset successfully!")
            self.destroy()

        except Exception as e:
            messagebox.showerror("Database Error", f"Failed to update password: {e}")
