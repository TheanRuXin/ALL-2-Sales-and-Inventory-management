import customtkinter as ctk
from PIL import Image
from tkinter import messagebox
import sqlite3
import subprocess
import sys
import hashlib
import re
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

class Register(ctk.CTk):
    def __init__(self):
        super().__init__()

        self.Trackwise_db()
        self.title("Registration")
        self.geometry("1920x974")
        ctk.set_appearance_mode("light")

        try:
            logo_image = Image.open(r"C:\Users\User\Documents\Ruxin file\ALL 2\logo.png").resize((80, 80))
            ctk_logo_image = ctk.CTkImage(light_image=logo_image, dark_image=logo_image, size=(80, 80))
            logo_frame = ctk.CTkFrame(self, fg_color="transparent")
            logo_frame.place(x=10, y=10)

            logo_label = ctk.CTkLabel(logo_frame, image=ctk_logo_image, text="")
            logo_label.pack()
        except Exception as e:
            print(f"Error loading bot image: {e}")

        # Main Frame for "Create Account"
        main_frame = ctk.CTkFrame(self, fg_color="#D9D9D9", border_width=0, corner_radius=15)
        main_frame.pack(pady=(50,50), padx=200, fill="both", expand=True)

        ctk.CTkLabel(main_frame, text="Create Account", font=("Arial", 48, "bold")).pack(pady=10)

        second_frame = ctk.CTkFrame(main_frame, fg_color="#FFFFFF", corner_radius=15)
        second_frame.pack(pady=(20, 50), padx=100, fill="both", expand=True)

        ctk.CTkLabel(second_frame, text="Username:", font=("Arial", 24)).pack(pady=10, padx=30, anchor="w")
        self.username_entry = ctk.CTkEntry(second_frame, placeholder_text="Username", width=880, height=35,justify="center", font=("Arial", 24))
        self.username_entry.pack()

        ctk.CTkLabel(second_frame, text="Email:", font=("Arial", 24)).pack(pady=10, padx=30, anchor="w")
        self.email_entry = ctk.CTkEntry(second_frame, placeholder_text="Email", width=880, height=35,justify="center", font=("Arial", 24))
        self.email_entry.pack()

        ctk.CTkLabel(second_frame, text="Password:", font=("Arial", 24)).pack(pady=10, padx=30, anchor="w")
        self.password_entry = ctk.CTkEntry(second_frame, placeholder_text="Password", show="*", width=880, height=35,justify="center", font=("Arial", 24))
        self.password_entry.pack()

        ctk.CTkLabel(second_frame, text="Confirm Password:", font=("Arial", 24)).pack(pady=10, padx=30, anchor="w")
        self.confirm_password_entry = ctk.CTkEntry(second_frame, placeholder_text="Confirm Password", show="*",width=880, height=35, justify="center", font=("Arial", 24))
        self.confirm_password_entry.pack()

        ctk.CTkLabel(second_frame, text="Select User Type:", font=("Arial", 24)).pack(pady=10, padx=30, anchor="w")
        self.role_var = ctk.StringVar(value="Select User Type")
        self.role_dropdown = ctk.CTkComboBox(second_frame, values=["Admin", "Cashier"], variable=self.role_var,width=880, height=35)
        self.role_dropdown.pack()

        ctk.CTkButton(second_frame, text="Register", width=300, height=30, fg_color="#2A50CB", hover_color="#1a39a3",command=self.register_user).pack(pady=(30, 10))
        self.back_button = ctk.CTkButton(main_frame, text="Back", width=100, height=30,fg_color="#2A50CB", hover_color="#1a39a3",command=self.back_to_dashboard).pack(pady=(1, 20), anchor='center')

    def Trackwise_db(self):
        conn = sqlite3.connect("Trackwise.db")
        cursor = conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT NOT NULL,
        password TEXT NOT NULL,
        role TEXT NOT NULL,
        email TEXT,
        phone TEXT,
        dob TEXT)''')
        conn.commit()
        conn.close()

    def hash_password(self,password):
        return hashlib.sha256(password.encode()).hexdigest()

    def send_email(self, username, password, recipient_email):
        sender_email = "your_email"  # Replace with your email
        sender_password = "vvvv vvvv vvvv vvvv "  # Replace with your email password (use app password for Gmail)
        subject = "Account Registration"
        body = f"Dear {username},\n\nYour account has been successfully created.\n\nUsername: {username}\nPassword: {password}\n\nPlease keep your login credentials safe.\n\nBest Regards,\nTrackwise Support"

        # Create the email
        msg = MIMEMultipart()
        msg['From'] = sender_email
        msg['To'] = recipient_email
        msg['Subject'] = subject

        msg.attach(MIMEText(body, 'plain'))

        # Connect to the server and send email
        try:
            with smtplib.SMTP('smtp.gmail.com', 587) as server:
                server.starttls()
                server.login(sender_email, sender_password)
                server.sendmail(sender_email, recipient_email, msg.as_string())
                print("Email sent successfully!")
        except Exception as e:
            print(f"Error sending email: {e}")

    def back_to_dashboard(self):
        self.destroy()
        subprocess.Popen([sys.executable, r"C:\Users\User\PycharmProjects\ALL 2\Manager dashboard.py"])

    def register_user(self):
        username = self.username_entry.get().strip()
        password = self.password_entry.get().strip()
        confirm_password = self.confirm_password_entry.get().strip()
        email = self.email_entry.get().strip()
        role = self.role_var.get()

        if not username or not password or not confirm_password or not email:
            messagebox.showerror("Error", "Fields cannot be empty!")
            return

        if password != confirm_password:
            messagebox.showerror("Error", "Passwords do not match!")
            return

        if role == "Select User Type":
            messagebox.showerror("Error", "Please select a user role!")
            return

        if len(password) < 8 or not re.search(r'\d', password) or not re.search(r'[A-Z]', password):
            messagebox.showerror("Error",
                                 "Password must be at least 8 characters long, with one number and one uppercase letter.")
            return

        conn = sqlite3.connect('Trackwise.db')
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE username=?", (username,))

        if cursor.fetchone():
            messagebox.showerror("Error", "Username already exists!")
            conn.close()
            return

        hashed_pw = self.hash_password(password)

        cursor.execute("""INSERT INTO users (username, password,role,email) VALUES (?,?,?,?)""", (username, hashed_pw,role,email))
        conn.commit()
        conn.close()
        messagebox.showinfo("Success", "User registered successfully!")
        recipient_email = email
        self.send_email(username, password, recipient_email)
        self.destroy()
        subprocess.Popen([sys.executable, r"C:\Users\User\PycharmProjects\ALL 2\manager login.py"])


if __name__ == "__main__":
    app = Register()
    app.mainloop()
