import sqlite3
import customtkinter as ctk
from tkinter import messagebox
from PIL import Image
import smtplib
import ssl
import certifi
import random
from email.message import EmailMessage
from ResetPassword import ResetPasswordPage


class ForgetPasswordPage(ctk.CTkToplevel):
    def __init__(self, parent):
        super().__init__(parent)
        self.title("Forgot Password")
        self.geometry("700x400")
        self.configure(fg_color="#FFFFFF")
        self.resizable(False, False)
        self.attributes("-topmost", True)

        self.width, self.height = 700, 400
        self.otp_code = ""
        self.email = ""

        self.set_ui()

    def set_ui(self):
        background_image = ctk.CTkImage(Image.open(r"C:\Users\User\Documents\Ruxin file\ALL 2\manager_dash.png"),
                                        size=(self.width, self.height - 71))
        background_image_label = ctk.CTkLabel(self, image=background_image, text="")
        background_image_label.place(relx=0, rely=0)
        title = ctk.CTkLabel(self, text="Forgot Password", font=("Inter", 24), text_color="black")
        title.place(x=240, y=30)

        username_label = ctk.CTkLabel(self, text="Enter Username:", font=("Inter", 18), text_color="black")
        username_label.place(x=100, y=100)

        self.username = ctk.StringVar()
        username_entry = ctk.CTkEntry(self, textvariable=self.username, width=400, height=40)
        username_entry.place(x=100, y=140)

        otp_label = ctk.CTkLabel(self, text="Enter OTP Code:", font=("Inter", 18), text_color="black")
        otp_label.place(x=100, y=200)

        self.code = ctk.StringVar()
        otp_entry = ctk.CTkEntry(self, textvariable=self.code, width=400, height=40)
        otp_entry.place(x=100, y=240)

        send_otp_button = ctk.CTkButton(self, text="Send OTP", command=self.send_otp, width=150)
        send_otp_button.place(x=120, y=320)

        verify_button = ctk.CTkButton(self, text="Verify", command=self.verify_otp, width=150)
        verify_button.place(x=280, y=320)

        cancel_button = ctk.CTkButton(self, text="Cancel", command=self.destroy, fg_color="red", width=150)
        cancel_button.place(x=440, y=320)

    def get_email_from_db(self, username):
        try:
            conn = sqlite3.connect("Trackwise.db")
            cursor = conn.cursor()
            cursor.execute("SELECT email FROM users WHERE username = ?", (username,))
            result = cursor.fetchone()
            conn.close()
            return result[0] if result else None
        except sqlite3.Error as e:
            messagebox.showerror("Database Error", f"Failed to retrieve email: {e}")
            return None

    def send_otp(self):
        username_input = self.username.get()
        if not username_input:
            messagebox.showwarning("Input Required", "Please enter your username.")
            return

        self.email = self.get_email_from_db(username_input)
        if not self.email:
            messagebox.showerror("Error", "Username not found.")
            return

        self.otp_code = str(random.randint(100000, 999999))

        sender_email = "ruxinthean@gmail.com"
        password = "vznn pcdo pnol oiqf"
        subject = "Reset Password OTP"
        body = f"Hi {username_input},\n\nYour OTP is: {self.otp_code}\n\nPlease don't share this code."

        message = EmailMessage()
        message.set_content(body)
        message["From"] = sender_email
        message["To"] = self.email
        message["Subject"] = subject

        context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)
        context.load_verify_locations(certifi.where())

        try:
            with smtplib.SMTP("smtp.gmail.com", 587) as server:
                server.starttls(context=context)
                server.login(sender_email, password)
                server.send_message(message)
            messagebox.showinfo("Success", f"OTP sent to {self.email}")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to send OTP: {e}")

    def verify_otp(self):
        if not self.code.get():
            messagebox.showerror("Error", "OTP field cannot be empty.")
            return

        if self.code.get() == self.otp_code:
            messagebox.showinfo("Success", "OTP verified. Proceed to reset password.")
            ResetPasswordPage(self, self.username.get())
            self.destroy()  # close current Toplevel
        else:
            messagebox.showerror("Error", "Invalid OTP. Please try again.")
            self.code.set("")
